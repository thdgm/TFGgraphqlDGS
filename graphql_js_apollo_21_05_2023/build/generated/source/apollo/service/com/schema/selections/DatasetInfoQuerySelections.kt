//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.schema.type.Concept
import com.schema.type.Distribution
import com.schema.type.Frequency
import com.schema.type.GraphQLID
import com.schema.type.GraphQLString
import com.schema.type.LangString
import com.schema.type.LocalDateTime
import com.schema.type.MediaType
import com.schema.type.PeriodOfTime
import com.schema.type.Resource
import kotlin.collections.List

public object DatasetInfoQuerySelections {
  private val __temporal: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "start",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "end",
          type = LocalDateTime.type
        ).build()
      )

  private val __distributions: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "accessUrl",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "format",
          type = MediaType.type
        ).build()
      )

  private val __onDataset: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "publisher",
          type = Concept.type
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "license",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "keywords",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "theme",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "language",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "accrualPeriodicity",
          type = Frequency.type
        ).build(),
        CompiledField.Builder(
          name = "spatial",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "temporal",
          type = PeriodOfTime.type
        ).selections(__temporal)
        .build(),
        CompiledField.Builder(
          name = "distributions",
          type = Distribution.type.notNull().list()
        ).selections(__distributions)
        .build()
      )

  private val __resource: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Dataset",
          possibleTypes = listOf("Dataset")
        ).selections(__onDataset)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "resource",
          type = Resource.type
        ).arguments(listOf(
          CompiledArgument.Builder("id", CompiledVariable("id")).build()
        ))
        .selections(__resource)
        .build()
      )
}
