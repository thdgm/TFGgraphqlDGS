//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.schema.DatasetInfoQuery
import commonModels.ConceptAdapterScalar
import commonModels.FrequencyAdapterScalar
import commonModels.LangStringAdapterScalar
import commonModels.MediaTypeAdapterScalar
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object DatasetInfoQuery_ResponseAdapter {
  public object Data : Adapter<DatasetInfoQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("resource")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetInfoQuery.Data {
      var _resource: DatasetInfoQuery.Resource? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _resource = Resource.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return DatasetInfoQuery.Data(
        resource = _resource
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetInfoQuery.Data,
    ): Unit {
      writer.name("resource")
      Resource.obj(true).nullable().toJson(writer, customScalarAdapters, value.resource)
    }
  }

  public object Resource : Adapter<DatasetInfoQuery.Resource> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetInfoQuery.Resource {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onDataset: DatasetInfoQuery.OnDataset? = null
      if (possibleTypes("Dataset").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onDataset = com.schema.adapter.DatasetInfoQuery_ResponseAdapter.OnDataset.fromJson(reader,
            customScalarAdapters)
      }

      return DatasetInfoQuery.Resource(
        __typename = __typename,
        onDataset = _onDataset
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetInfoQuery.Resource,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onDataset != null) {
        com.schema.adapter.DatasetInfoQuery_ResponseAdapter.OnDataset.toJson(writer,
            customScalarAdapters, value.onDataset)
      }
    }
  }

  public object OnDataset : Adapter<DatasetInfoQuery.OnDataset> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "title", "publisher", "description",
        "license", "keywords", "theme", "language", "issued", "modified", "accrualPeriodicity",
        "spatial", "temporal", "distributions")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetInfoQuery.OnDataset {
      var _id: String? = null
      var _title: List<LangStringAdapterScalar>? = null
      var _publisher: ConceptAdapterScalar? = null
      var _description: List<LangStringAdapterScalar>? = null
      var _license: String? = null
      var _keywords: List<LangStringAdapterScalar>? = null
      var _theme: List<String>? = null
      var _language: List<String>? = null
      var _issued: Any? = null
      var _modified: Any? = null
      var _accrualPeriodicity: FrequencyAdapterScalar? = null
      var _spatial: List<String>? = null
      var _temporal: DatasetInfoQuery.Temporal? = null
      var _distributions: List<DatasetInfoQuery.Distribution>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          2 -> _publisher = commonModels.conceptAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          3 -> _description = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          4 -> _license = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _keywords = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          6 -> _theme = StringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          7 -> _language = StringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          8 -> _issued = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          9 -> _modified = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          10 -> _accrualPeriodicity = commonModels.frequencyAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          11 -> _spatial = StringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          12 -> _temporal = Temporal.obj().nullable().fromJson(reader, customScalarAdapters)
          13 -> _distributions = Distribution.obj().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetInfoQuery.OnDataset(
        id = _id!!,
        title = _title,
        publisher = _publisher,
        description = _description,
        license = _license,
        keywords = _keywords,
        theme = _theme,
        language = _language,
        issued = _issued,
        modified = _modified,
        accrualPeriodicity = _accrualPeriodicity,
        spatial = _spatial,
        temporal = _temporal,
        distributions = _distributions
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetInfoQuery.OnDataset,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.title)

      writer.name("publisher")
      commonModels.conceptAdapter.nullable().toJson(writer, customScalarAdapters, value.publisher)

      writer.name("description")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.description)

      writer.name("license")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.license)

      writer.name("keywords")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.keywords)

      writer.name("theme")
      StringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.theme)

      writer.name("language")
      StringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.language)

      writer.name("issued")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.issued)

      writer.name("modified")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.modified)

      writer.name("accrualPeriodicity")
      commonModels.frequencyAdapter.nullable().toJson(writer, customScalarAdapters,
          value.accrualPeriodicity)

      writer.name("spatial")
      StringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.spatial)

      writer.name("temporal")
      Temporal.obj().nullable().toJson(writer, customScalarAdapters, value.temporal)

      writer.name("distributions")
      Distribution.obj().list().nullable().toJson(writer, customScalarAdapters, value.distributions)
    }
  }

  public object Temporal : Adapter<DatasetInfoQuery.Temporal> {
    public val RESPONSE_NAMES: List<String> = listOf("start", "end")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetInfoQuery.Temporal {
      var _start: Any? = null
      var _end: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _start = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          1 -> _end = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return DatasetInfoQuery.Temporal(
        start = _start,
        end = _end
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetInfoQuery.Temporal,
    ): Unit {
      writer.name("start")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.start)

      writer.name("end")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.end)
    }
  }

  public object Distribution : Adapter<DatasetInfoQuery.Distribution> {
    public val RESPONSE_NAMES: List<String> = listOf("accessUrl", "format")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetInfoQuery.Distribution {
      var _accessUrl: String? = null
      var _format: MediaTypeAdapterScalar? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _accessUrl = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _format = commonModels.mediaTypeAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetInfoQuery.Distribution(
        accessUrl = _accessUrl,
        format = _format
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetInfoQuery.Distribution,
    ): Unit {
      writer.name("accessUrl")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.accessUrl)

      writer.name("format")
      commonModels.mediaTypeAdapter.nullable().toJson(writer, customScalarAdapters, value.format)
    }
  }
}
