//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.schema.DatasetsQuery
import commonModels.ConceptAdapterScalar
import commonModels.LangStringAdapterScalar
import commonModels.MediaTypeAdapterScalar
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object DatasetsQuery_ResponseAdapter {
  public object Data : Adapter<DatasetsQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("resourcesByFilter")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsQuery.Data {
      var _resourcesByFilter: List<DatasetsQuery.ResourcesByFilter?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _resourcesByFilter = ResourcesByFilter.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetsQuery.Data(
        resourcesByFilter = _resourcesByFilter
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsQuery.Data,
    ): Unit {
      writer.name("resourcesByFilter")
      ResourcesByFilter.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.resourcesByFilter)
    }
  }

  public object ResourcesByFilter : Adapter<DatasetsQuery.ResourcesByFilter> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsQuery.ResourcesByFilter {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onDataset: DatasetsQuery.OnDataset? = null
      if (possibleTypes("Dataset").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onDataset = com.schema.adapter.DatasetsQuery_ResponseAdapter.OnDataset.fromJson(reader,
            customScalarAdapters)
      }

      return DatasetsQuery.ResourcesByFilter(
        __typename = __typename,
        onDataset = _onDataset
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsQuery.ResourcesByFilter,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onDataset != null) {
        com.schema.adapter.DatasetsQuery_ResponseAdapter.OnDataset.toJson(writer,
            customScalarAdapters, value.onDataset)
      }
    }
  }

  public object OnDataset : Adapter<DatasetsQuery.OnDataset> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "title", "publisher", "description",
        "distributions")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsQuery.OnDataset {
      var _id: String? = null
      var _title: List<LangStringAdapterScalar>? = null
      var _publisher: ConceptAdapterScalar? = null
      var _description: List<LangStringAdapterScalar>? = null
      var _distributions: List<DatasetsQuery.Distribution>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          2 -> _publisher = commonModels.conceptAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          3 -> _description = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          4 -> _distributions = Distribution.obj().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetsQuery.OnDataset(
        id = _id!!,
        title = _title,
        publisher = _publisher,
        description = _description,
        distributions = _distributions
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsQuery.OnDataset,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.title)

      writer.name("publisher")
      commonModels.conceptAdapter.nullable().toJson(writer, customScalarAdapters, value.publisher)

      writer.name("description")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.description)

      writer.name("distributions")
      Distribution.obj().list().nullable().toJson(writer, customScalarAdapters, value.distributions)
    }
  }

  public object Distribution : Adapter<DatasetsQuery.Distribution> {
    public val RESPONSE_NAMES: List<String> = listOf("format")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsQuery.Distribution {
      var _format: MediaTypeAdapterScalar? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _format = commonModels.mediaTypeAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetsQuery.Distribution(
        format = _format
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsQuery.Distribution,
    ): Unit {
      writer.name("format")
      commonModels.mediaTypeAdapter.nullable().toJson(writer, customScalarAdapters, value.format)
    }
  }
}
