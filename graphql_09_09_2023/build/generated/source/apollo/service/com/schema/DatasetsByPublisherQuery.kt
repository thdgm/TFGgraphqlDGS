//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.schema.adapter.DatasetsByPublisherQuery_ResponseAdapter
import com.schema.adapter.DatasetsByPublisherQuery_VariablesAdapter
import com.schema.selections.DatasetsByPublisherQuerySelections
import com.schema.type.MapInput
import commonModels.LangStringAdapterScalar
import commonModels.MediaTypeAdapterScalar
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class DatasetsByPublisherQuery(
  public val filter: Optional<List<MapInput>?> = Optional.Absent,
  public val page: Int,
  public val isDataset: Boolean,
) : Query<DatasetsByPublisherQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    DatasetsByPublisherQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = DatasetsByPublisherQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.schema.type.Query.type
  )
  .selections(selections = DatasetsByPublisherQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(DatasetsByPublisherQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val resourcesByFilter: List<ResourcesByFilter?>?,
  ) : Query.Data {
    public fun resourcesByFilterFilterNotNull(): List<ResourcesByFilter>? =
        resourcesByFilter?.filterNotNull()
  }

  public data class ResourcesByFilter(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on Dataset
     */
    public val onDataset: OnDataset?,
  )

  public data class OnDataset(
    public val id: String,
    public val title: List<LangStringAdapterScalar>?,
    public val distributions: List<Distribution>?,
    public val inCatalog: List<InCatalog>?,
  )

  public data class Distribution(
    public val format: MediaTypeAdapterScalar?,
  )

  public data class InCatalog(
    public val resources: List<Resource>?,
  )

  public data class Resource(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on DataService
     */
    public val onDataService: OnDataService?,
  )

  public data class OnDataService(
    public val isAccessedBy: List<IsAccessedBy>?,
  )

  public data class IsAccessedBy(
    public val id: String,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "05d1df2f0b0405bb6d5648158768eefd1212332c206bd2a9e23b68d8030bcce7"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query DatasetsByPublisher($filter: \[MapInput!\], $page: Int!, $isDataset: Boolean!) {
     *   resourcesByFilter(filters: $filter, type: "dataset", isDataset: $isDataset, isCatalog:
     * false, isDataService: false, isDatasetSeries: false, page: $page) {
     *     __typename
     *     ... on Dataset @include(if: $isDataset) {
     *       id
     *       title
     *       distributions {
     *         format
     *       }
     *       inCatalog {
     *         resources(page: $page, pageSize: 3, type: "data_service") {
     *           __typename
     *           ... on DataService {
     *             isAccessedBy {
     *               id
     *             }
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query DatasetsByPublisher(${'$'}filter: [MapInput!], ${'$'}page: Int!, ${'$'}isDataset: Boolean!) { resourcesByFilter(filters: ${'$'}filter, type: \"dataset\", isDataset: ${'$'}isDataset, isCatalog: false, isDataService: false, isDatasetSeries: false, page: ${'$'}page) { __typename ... on Dataset @include(if: ${'$'}isDataset) { id title distributions { format } inCatalog { resources(page: ${'$'}page, pageSize: 3, type: \"data_service\") { __typename ... on DataService { isAccessedBy { id } } } } } } }"

    public const val OPERATION_NAME: String = "DatasetsByPublisher"
  }
}
