//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.schema.KeywordsByPublisherQuery
import commonModels.LangStringAdapterScalar
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object KeywordsByPublisherQuery_ResponseAdapter {
  public object Data : Adapter<KeywordsByPublisherQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("publisher")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        KeywordsByPublisherQuery.Data {
      var _publisher: KeywordsByPublisherQuery.Publisher? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _publisher = Publisher.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return KeywordsByPublisherQuery.Data(
        publisher = _publisher
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: KeywordsByPublisherQuery.Data,
    ): Unit {
      writer.name("publisher")
      Publisher.obj().nullable().toJson(writer, customScalarAdapters, value.publisher)
    }
  }

  public object Publisher : Adapter<KeywordsByPublisherQuery.Publisher> {
    public val RESPONSE_NAMES: List<String> = listOf("notation", "label", "resources")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        KeywordsByPublisherQuery.Publisher {
      var _notation: String? = null
      var _label: String? = null
      var _resources: List<KeywordsByPublisherQuery.Resource>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _notation = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _label = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _resources = Resource.obj(true).list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return KeywordsByPublisherQuery.Publisher(
        notation = _notation,
        label = _label,
        resources = _resources
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: KeywordsByPublisherQuery.Publisher,
    ): Unit {
      writer.name("notation")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.notation)

      writer.name("label")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.label)

      writer.name("resources")
      Resource.obj(true).list().nullable().toJson(writer, customScalarAdapters, value.resources)
    }
  }

  public object Resource : Adapter<KeywordsByPublisherQuery.Resource> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        KeywordsByPublisherQuery.Resource {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onDataset: KeywordsByPublisherQuery.OnDataset? = null
      if (possibleTypes("Dataset").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onDataset = com.schema.adapter.KeywordsByPublisherQuery_ResponseAdapter.OnDataset.fromJson(reader,
            customScalarAdapters)
      }

      return KeywordsByPublisherQuery.Resource(
        __typename = __typename,
        onDataset = _onDataset
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: KeywordsByPublisherQuery.Resource,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onDataset != null) {
        com.schema.adapter.KeywordsByPublisherQuery_ResponseAdapter.OnDataset.toJson(writer,
            customScalarAdapters, value.onDataset)
      }
    }
  }

  public object OnDataset : Adapter<KeywordsByPublisherQuery.OnDataset> {
    public val RESPONSE_NAMES: List<String> = listOf("keywords")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        KeywordsByPublisherQuery.OnDataset {
      var _keywords: List<LangStringAdapterScalar>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _keywords = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return KeywordsByPublisherQuery.OnDataset(
        keywords = _keywords
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: KeywordsByPublisherQuery.OnDataset,
    ): Unit {
      writer.name("keywords")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.keywords)
    }
  }
}
