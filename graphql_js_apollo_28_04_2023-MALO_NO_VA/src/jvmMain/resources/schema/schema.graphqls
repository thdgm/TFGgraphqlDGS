schema {
  query: Query
}


type Query {
  resource(id: ID): Resource
  catalog(id: ID): Catalog
  dataset(id: ID): DatasetInCatalog
  dataService(id: ID): DataService
  datasetSeries(id: ID): DatasetSeries
  catalogRecord(id: ID): CatalogRecord
  distribution(id: ID): Distribution
  resourcesByFilter(filter:String, value: [String!]): [Resource] # Filter could be p.g: publisher
  findResourceByIdentifier(id: String): Resource
  getAllThemes: [String]      # Get all existing themes
  getAllKeywords(language: String): [String] # Get all existing keywords with particular language
  getAllPublishers: [String]  # Get all existing publisher's labels
  getAllFrequencies: [String] # Get all existing Frequency's ranges
  getAllFormats: [String]     # Get all existing Formats
  getAllAdminLabel: [String]  # Get all existing Publisher's notations p.g: L02000048 mapped
                              # Map them. If starts with L0: Local Administration
                              # According to https://datos.gob.es/es/recurso/sector-publico/org/Organismo


}

type Mutation {
  createCatalogRecord(input: CatalogRecordInput):CatalogRecordOutput
}

input CatalogRecordInput{
  inCatalog: ID #root por defecto
  catalogRecordId: ID
  contentType: String #metadata content type
  content: String #content as string
  contentUrl:String #record location
  hints:[String!] #Extra process apart of contentType
}

union CatalogRecordOutput = CatalogRecord | Error

type Error{
  message: String
}
#
# type -> final type, cannot be extended
# interface -> abstract type, can be extended
#

#
# The element has strings that can be referenced within some external contexts, e.g. URIs.
# These identifiers can be used as an alternative unique identifier.
#
interface ReferenceWithinExternalContext {
  # A unique identifier of the resource being described or cataloged.
  # The identifier is a text string which is assigned to the resource to provide
  # an unambiguous reference within a particular context.
  #
  # Implementation note: how many identifiers has a resource?
  # Decision: 0..n
  identifier: [String!]
}

# Resource published or curated by a single agent.
interface Resource implements ReferenceWithinExternalContext{
  #
  # An identifier unique within this catalogue expressed as an UUID.
  # Note: this enable that the underlying storage system can be, for example, a Redis.
  #
  id: ID!
  # A name given to the resource.
  # It could be many titles, one another with their own language
  title: [LangString!]
  # It could be many descriptions, one another with their own language
  description: [LangString!]

  # A language of the resource.
  # This refers to the natural language used for textual metadata (i.e., titles, descriptions, etc.)
  # of a cataloged resource (i.e., dataset or service) or the textual values of a dataset distribution.
  # Usage note: Repeat this property if the resource is available in multiple languages.
  language: [String!]
  # From https://w3c.github.io/dxwg/dcat/
  # Date of formal issuance of the resource.
  issued: LocalDateTime
  # Most recent date on which the resource was changed, updated or modified.
  modified: LocalDateTime
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  theme:[String!]

  # A unique identifier of the resource being described or cataloged.
  # The identifier is a text string which is assigned to the resource to provide
  # an unambiguous reference within a particular context.
  #
  # Implementation note: how many identifiers has a resource?
  # Decision: 0..1
  #identifier: String
  identifier: [String!]
  license:String
  publisher:Concept

}

# It can be a Resource, Catalog, dataset or dataservice
# union ResourceInCatalog = DatasetSeries | DataService | Dataset | Catalog
interface ResourceInCatalog implements AbstractDataset & Resource & ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!]#String!
  description: [LangString!]
  language: [String!]
  issued: LocalDateTime
  modified: LocalDateTime
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  theme:[String!]
  license:String
  publisher:Concept
  identifier: [String!]

}

interface DatasetInCatalog implements AbstractDataset & Resource & ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!]#String!
  description: [LangString!]
  language: [String!]
  issued: LocalDateTime
  modified: LocalDateTime
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  # In dcat(inverse-properties I could not find this one,
  # which is the inverse of servesDataset. So I decided named it like this.
  isServedBy(filter:String): [DataService!]
  theme:[String!]
  license:String
  publisher:Concept
  identifier: [String!]
}

# Concepto dcat:Dataset
interface AbstractDataset implements Resource & ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!]#String!
  description: [LangString!]
  language: [String!]
  issued: LocalDateTime
  modified: LocalDateTime
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  theme:[String!]
  license:String
  publisher:Concept
  identifier: [String!]
}

# A collection of operations that provides access to one or more datasets or
# data processing functions.
#
# Implemented by DataServiceEntity
#   id
#   title
#.  servesDataset -> <id dataservice entity, id dataset in catalog>
type DataService implements ResourceInCatalog & Resource & AbstractDataset & ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!]#String!
  servesDataset: [DatasetInCatalog!] # If a DataService is bound to one or more specified
  # Datasets, they are indicated by the this property.
  description: [LangString!]
  language: [String!]
  issued: LocalDateTime
  modified: LocalDateTime
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  theme:[String!]
  license:String
  publisher:Concept
  identifier: [String!]

}

#
# A Catalog represents a catalog, which is a Dataset in which each individual item
# is a metadata record describing some resource.
#
# Implemented by CatalogEntity
#   id
#   title
#   resources = <fromId, CatalogEntity | DatasetEntity | DatasetSeriesEntity | DatasetServiceEntity, fromId>
#   datasets = <toId,  CatalogEntity | DatasetEntity | DatasetSeriesEntity, toId>
#   services = <toId,  DatasetServiceEntity, toId>
#   catalogs = relationships.findById(catalogEntity.id).filter { it.type = CatalogEntity })
#.  records => tabla de CatalogInRecord
type Catalog implements ResourceInCatalog & DatasetInCatalog & AbstractDataset & Resource & ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!]
  resources: [ResourceInCatalog!] # A resource that is listed in the catalog.
  datasets: [DatasetInCatalog!]  # A dataset that is listed in the catalog.
  services: [DataService!] # A service that is listed in the catalog.
  catalogs: [Catalog!] # A catalog that is listed in the catalog.
  records: [CatalogRecord!] # A record describing the registration of a single resource
  # (e.g., a dataset, a data service) that is part of the catalog.
  # set(records.primaryTopic) == resources
  description: [LangString!]
  language: [String!]
  issued: LocalDateTime
  modified: LocalDateTime
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  # In dcat(inverse-properties I could not find this one,
  # which is the inverse of servesDataset. So I decided named it like this.
  isServedBy(filter:String): [DataService!]
  theme:[String!]
  license:String
  publisher:Concept
  identifier: [String!]
  # Future:
  #  - A Catalog can record descriptions of resources such as dataset or dataservices
  #    dcatDescriptions(first: Int, offset: ID): [CatalogDescriptions!]
}

# Concepto dcat:DatasetSeries
# Implemented by DataServiceEntity
#   id
#   title
type DatasetSeries implements ResourceInCatalog & DatasetInCatalog & AbstractDataset & Resource & ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!]
  description: [LangString!]
  language: [String!]
  seriesMembers(filter:String): [Dataset!] # rename to dcat:seriesMembers due to https://w3c.github.io/dxwg/dcat/#inverse-properties
  issued: LocalDateTime
  modified: LocalDateTime
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  # In dcat(inverse-properties I could not find this one,
  # which is the inverse of servesDataset. So I decided named it like this.
  isServedBy(filter:String): [DataService!]
  theme:[String!]
  license:String
  publisher:Concept
  identifier: [String!]
}

# Dataset que no es ni Catalogo ni Dataset Series
# Implemented by DataServiceEntity
#   id
#   title
#.  inSeries -> <id dataservice entity, id series>
#.  distributions -> <id dataservice entity, id distributions>
type Dataset implements ResourceInCatalog & DatasetInCatalog & AbstractDataset & Resource & ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!]
  inSeries(filter:String): [DatasetSeries!] # A dataset series of which the dataset is part.
  distributions: [Distribution!] # An available distribution of the dataset.
  description: [LangString!]
  keywords:[LangString!]
  language: [String!]
  issued: LocalDateTime
  modified: LocalDateTime

  spatial: [String!] # The geographical area covered by the dataset
  accrualPeriodicity: Frequency # The frequency at which a dataset is published. p.e: days, 1
  temporal: PeriodOfTime # The temporal period that the dataset covers.

  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  inCatalog(filter:String): [Catalog!]
  # From https://w3c.github.io/dxwg/dcat/#inverse-properties
  isPrimaryTopicOf(filter:String): [CatalogRecord!]
  # In dcat(inverse-properties I could not find this one,
  # which is the inverse of servesDataset. So I decided named it like this.
  isServedBy(filter:String): [DataService!]
  theme:[String!]
  license:String
  publisher:Concept
  identifier: [String!]

  validity: LocalDateTime #According csv model from https://datos.gob.es Indicates when the resource expires
  regulations: [String!] #According csv model from https://datos.gob.es.
  relatedResources: [String!] #According csv model from https://datos.gob.es.
}

# Implemented by CatalogRecordEntity
#   id
#   title
#   primaryTopic: recordId
#.  +CatalogInRecord: <catalogId, catalogRecordId>
type CatalogRecord {
  id: ID!
  title: String  # Record es "Zaragoza", Catalog Record es "Metadato de Zaragoza"
  contentType: String
  content: String
  contentURL: String
  hints: [String!]
  primaryTopic: ResourceInCatalog!
  inCatalog: [Catalog!] #root por defecto
}

# A specific representation of a dataset.
# This represents a general availability of a dataset.
# That is, represents an accessible form of a dataset such as a downloadable file.
#
# Implemented by Distribution
#   id
#   title
#.  accessService .. ver DataServiceEntity.distributions -> <id dataservice entity, id distributions>
type Distribution implements ReferenceWithinExternalContext{
  id: ID!
  title: [LangString!] #String!

  # Valid URL
  # e.g. with UrlValidator or URL(url).toURI()
  accessUrl:String

  accessService: [DataService!] # A data service that gives access to the distribution of the dataset
  byteSize: NonNegativeInt

  # The file format of the distribution.
  # Use note: Use the media type of the distribution as defined by IANA if available
  # e.g. prefer "text/csv" over "CSV"
  # check: ensure that the format conforms to a media type without parameters (e.g. "application/xhtml+xml;qs=0.8"
  # should cleansed to "application/xhtml+xml")
  format: MediaType
  identifier: [String!]
}

# This represents the description of one resource and the language of that description
#type ResourceDescription{
# text:String
#idioma:String
#}

# scalar LangString {
#    literal: String!      # En Unicode
#.   languageTag: String   # BCP 47
# }


# This represents the updating frequency
#type Periodicidad{
#  rango:String  #day,month,year
#  periodo:String   #"1.0"...
#}

type PeriodOfTime{
  start:LocalDateTime
  end:LocalDateTime
}


scalar LangString

scalar LocalDateTime

scalar Frequency

scalar NonNegativeInt

scalar Concept

scalar MediaType