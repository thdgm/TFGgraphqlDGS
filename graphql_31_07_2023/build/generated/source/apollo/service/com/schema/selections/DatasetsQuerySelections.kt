//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledCondition
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.schema.type.Concept
import com.schema.type.Distribution
import com.schema.type.GraphQLID
import com.schema.type.GraphQLInt
import com.schema.type.GraphQLString
import com.schema.type.LangString
import com.schema.type.LocalDateTime
import com.schema.type.MediaType
import com.schema.type.Resource
import kotlin.collections.List

public object DatasetsQuerySelections {
  private val __distributions: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "format",
          type = MediaType.type
        ).build()
      )

  private val __onDataset: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "publisher",
          type = Concept.type
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "distributions",
          type = Distribution.type.notNull().list()
        ).selections(__distributions)
        .build()
      )

  private val __onCatalog: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfResources",
          type = GraphQLInt.type
        ).build()
      )

  private val __onDataService: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfServedResources",
          type = GraphQLInt.type
        ).build()
      )

  private val __onDatasetSeries: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfMembersDatasets",
          type = GraphQLInt.type
        ).build()
      )

  private val __resourcesByFilter: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Dataset",
          possibleTypes = listOf("Dataset")
        ).condition(listOf(CompiledCondition("isDataset", false)))
        .selections(__onDataset)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "Catalog",
          possibleTypes = listOf("Catalog")
        ).condition(listOf(CompiledCondition("isCatalog", false)))
        .selections(__onCatalog)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "DataService",
          possibleTypes = listOf("DataService")
        ).condition(listOf(CompiledCondition("isDataService", false)))
        .selections(__onDataService)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "DatasetSeries",
          possibleTypes = listOf("DatasetSeries")
        ).condition(listOf(CompiledCondition("isDatasetSeries", false)))
        .selections(__onDatasetSeries)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "resourcesByFilter",
          type = Resource.type.list()
        ).arguments(listOf(
          CompiledArgument.Builder("filters", CompiledVariable("filter")).build(),
          CompiledArgument.Builder("isCatalog", CompiledVariable("isCatalog")).build(),
          CompiledArgument.Builder("isDataService", CompiledVariable("isDataService")).build(),
          CompiledArgument.Builder("isDataset", CompiledVariable("isDataset")).build(),
          CompiledArgument.Builder("isDatasetSeries", CompiledVariable("isDatasetSeries")).build(),
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("type", CompiledVariable("type")).build()
        ))
        .selections(__resourcesByFilter)
        .build()
      )
}
