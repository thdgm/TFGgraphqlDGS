//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.schema.adapter.DatasetsQuery_ResponseAdapter
import com.schema.adapter.DatasetsQuery_VariablesAdapter
import com.schema.selections.DatasetsQuerySelections
import com.schema.type.MapInput
import commonModels.ConceptAdapterScalar
import commonModels.LangStringAdapterScalar
import commonModels.MediaTypeAdapterScalar
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class DatasetsQuery(
  public val filter: Optional<List<MapInput>?> = Optional.Absent,
  public val type: String,
  public val page: Int,
  public val isDataset: Boolean,
  public val isCatalog: Boolean,
  public val isDataService: Boolean,
  public val isDatasetSeries: Boolean,
) : Query<DatasetsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    DatasetsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = DatasetsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.schema.type.Query.type
  )
  .selections(selections = DatasetsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(DatasetsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val resourcesByFilter: List<ResourcesByFilter?>?,
  ) : Query.Data {
    public fun resourcesByFilterFilterNotNull(): List<ResourcesByFilter>? =
        resourcesByFilter?.filterNotNull()
  }

  public data class ResourcesByFilter(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on Dataset
     */
    public val onDataset: OnDataset?,
    /**
     * Synthetic field for inline fragment on Catalog
     */
    public val onCatalog: OnCatalog?,
    /**
     * Synthetic field for inline fragment on DataService
     */
    public val onDataService: OnDataService?,
    /**
     * Synthetic field for inline fragment on DatasetSeries
     */
    public val onDatasetSeries: OnDatasetSeries?,
  )

  public data class OnDataset(
    public val id: String,
    public val title: List<LangStringAdapterScalar>?,
    public val publisher: ConceptAdapterScalar?,
    public val description: List<LangStringAdapterScalar>?,
    public val distributions: List<Distribution>?,
  )

  public data class Distribution(
    public val format: MediaTypeAdapterScalar?,
  )

  public data class OnCatalog(
    public val id: String,
    public val title: List<LangStringAdapterScalar>?,
    public val description: List<LangStringAdapterScalar>?,
    public val issued: Any?,
    public val modified: Any?,
    public val numberOfResources: Int?,
  )

  public data class OnDataService(
    public val id: String,
    public val title: List<LangStringAdapterScalar>?,
    public val description: List<LangStringAdapterScalar>?,
    public val issued: Any?,
    public val modified: Any?,
    public val numberOfServedResources: Int?,
  )

  public data class OnDatasetSeries(
    public val id: String,
    public val title: List<LangStringAdapterScalar>?,
    public val description: List<LangStringAdapterScalar>?,
    public val issued: Any?,
    public val modified: Any?,
    public val numberOfMembersDatasets: Int?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "eee33303e337044c21d3af11489ef001aeece0f4b38191f190af2bf6db461730"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query Datasets($filter: \[MapInput!\], $type: String!, $page: Int!, $isDataset: Boolean!,
     * $isCatalog: Boolean!, $isDataService: Boolean!, $isDatasetSeries: Boolean!) {
     *   resourcesByFilter(filters: $filter, type: $type, isDataset: $isDataset, isCatalog:
     * $isCatalog, isDataService: $isDataService, isDatasetSeries: $isDatasetSeries, page: $page) {
     *     __typename
     *     ... on Dataset @include(if: $isDataset) {
     *       id
     *       title
     *       publisher
     *       description
     *       distributions {
     *         format
     *       }
     *     }
     *     ... on Catalog @include(if: $isCatalog) {
     *       id
     *       title
     *       description
     *       issued
     *       modified
     *       numberOfResources
     *     }
     *     ... on DataService @include(if: $isDataService) {
     *       id
     *       title
     *       description
     *       issued
     *       modified
     *       numberOfServedResources
     *     }
     *     ... on DatasetSeries @include(if: $isDatasetSeries) {
     *       id
     *       title
     *       description
     *       issued
     *       modified
     *       numberOfMembersDatasets
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query Datasets(${'$'}filter: [MapInput!], ${'$'}type: String!, ${'$'}page: Int!, ${'$'}isDataset: Boolean!, ${'$'}isCatalog: Boolean!, ${'$'}isDataService: Boolean!, ${'$'}isDatasetSeries: Boolean!) { resourcesByFilter(filters: ${'$'}filter, type: ${'$'}type, isDataset: ${'$'}isDataset, isCatalog: ${'$'}isCatalog, isDataService: ${'$'}isDataService, isDatasetSeries: ${'$'}isDatasetSeries, page: ${'$'}page) { __typename ... on Dataset @include(if: ${'$'}isDataset) { id title publisher description distributions { format } } ... on Catalog @include(if: ${'$'}isCatalog) { id title description issued modified numberOfResources } ... on DataService @include(if: ${'$'}isDataService) { id title description issued modified numberOfServedResources } ... on DatasetSeries @include(if: ${'$'}isDatasetSeries) { id title description issued modified numberOfMembersDatasets } } }"

    public const val OPERATION_NAME: String = "Datasets"
  }
}
