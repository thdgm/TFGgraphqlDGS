//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledCondition
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.schema.type.Catalog
import com.schema.type.CatalogRecord
import com.schema.type.Concept
import com.schema.type.DataService
import com.schema.type.Dataset
import com.schema.type.DatasetInCatalog
import com.schema.type.DatasetSeries
import com.schema.type.Distribution
import com.schema.type.Frequency
import com.schema.type.GraphQLID
import com.schema.type.GraphQLInt
import com.schema.type.GraphQLString
import com.schema.type.LangString
import com.schema.type.LocalDateTime
import com.schema.type.MediaType
import com.schema.type.PeriodOfTime
import com.schema.type.Resource
import com.schema.type.ResourceInCatalog
import kotlin.collections.List

public object DatasetInfoQuerySelections {
  private val __inCatalog: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build()
      )

  private val __isPrimaryTopicOf: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type
        ).build()
      )

  private val __inSeries: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __isServedBy: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build()
      )

  private val __temporal: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "start",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "end",
          type = LocalDateTime.type
        ).build()
      )

  private val __distributions: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "accessUrl",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "format",
          type = MediaType.type
        ).build()
      )

  private val __onDataset: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "publisher",
          type = Concept.type
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "license",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "keywords",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "theme",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "language",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "accrualPeriodicity",
          type = Frequency.type
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "inCatalog",
          type = Catalog.type.notNull().list()
        ).selections(__inCatalog)
        .build(),
        CompiledField.Builder(
          name = "isPrimaryTopicOf",
          type = CatalogRecord.type.notNull().list()
        ).selections(__isPrimaryTopicOf)
        .build(),
        CompiledField.Builder(
          name = "inSeries",
          type = DatasetSeries.type.notNull().list()
        ).selections(__inSeries)
        .build(),
        CompiledField.Builder(
          name = "isServedBy",
          type = DataService.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("pageSize", -1).build()
        ))
        .selections(__isServedBy)
        .build(),
        CompiledField.Builder(
          name = "spatial",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "temporal",
          type = PeriodOfTime.type
        ).selections(__temporal)
        .build(),
        CompiledField.Builder(
          name = "distributions",
          type = Distribution.type.notNull().list()
        ).selections(__distributions)
        .build()
      )

  private val __resources: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __records: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type
        ).build()
      )

  private val __isServedBy1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __inCatalog1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __isPrimaryTopicOf1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type
        ).build()
      )

  private val __onCatalog: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfResources",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "publisher",
          type = Concept.type
        ).build(),
        CompiledField.Builder(
          name = "license",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfResources",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfCatalogs",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfDataServices",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfDatasets",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfDatasetSeries",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfRecords",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfServedBy",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "resources",
          type = ResourceInCatalog.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("pageSize", 10).build(),
          CompiledArgument.Builder("type", "All").build()
        ))
        .selections(__resources)
        .build(),
        CompiledField.Builder(
          name = "records",
          type = CatalogRecord.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("pageSize", 10).build()
        ))
        .selections(__records)
        .build(),
        CompiledField.Builder(
          name = "isServedBy",
          type = DataService.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("pageSize", 10).build()
        ))
        .selections(__isServedBy1)
        .build(),
        CompiledField.Builder(
          name = "inCatalog",
          type = Catalog.type.notNull().list()
        ).selections(__inCatalog1)
        .build(),
        CompiledField.Builder(
          name = "isPrimaryTopicOf",
          type = CatalogRecord.type.notNull().list()
        ).selections(__isPrimaryTopicOf1)
        .build()
      )

  private val __isPrimaryTopicOf2: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type
        ).build()
      )

  private val __servesDataset: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __inCatalog2: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __onDataService: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "publisher",
          type = Concept.type
        ).build(),
        CompiledField.Builder(
          name = "license",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfServedResources",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfServedCatalogs",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfServedDatasets",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfServedDatasetSeries",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "isPrimaryTopicOf",
          type = CatalogRecord.type.notNull().list()
        ).selections(__isPrimaryTopicOf2)
        .build(),
        CompiledField.Builder(
          name = "servesDataset",
          type = DatasetInCatalog.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("pageSize", 10).build(),
          CompiledArgument.Builder("type", "All").build()
        ))
        .selections(__servesDataset)
        .build(),
        CompiledField.Builder(
          name = "inCatalog",
          type = Catalog.type.notNull().list()
        ).selections(__inCatalog2)
        .build()
      )

  private val __seriesMembers: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __isPrimaryTopicOf3: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type
        ).build()
      )

  private val __inCatalog3: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __isServedBy2: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __onDatasetSeries: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "issued",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "modified",
          type = LocalDateTime.type
        ).build(),
        CompiledField.Builder(
          name = "publisher",
          type = Concept.type
        ).build(),
        CompiledField.Builder(
          name = "license",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "numberOfMembersDatasets",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "seriesMembers",
          type = Dataset.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("pageSize", 10).build()
        ))
        .selections(__seriesMembers)
        .build(),
        CompiledField.Builder(
          name = "isPrimaryTopicOf",
          type = CatalogRecord.type.notNull().list()
        ).selections(__isPrimaryTopicOf3)
        .build(),
        CompiledField.Builder(
          name = "inCatalog",
          type = Catalog.type.notNull().list()
        ).selections(__inCatalog3)
        .build(),
        CompiledField.Builder(
          name = "isServedBy",
          type = DataService.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("pageSize", 10).build()
        ))
        .selections(__isServedBy2)
        .build()
      )

  private val __resource: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Dataset",
          possibleTypes = listOf("Dataset")
        ).condition(listOf(CompiledCondition("isDataset", false)))
        .selections(__onDataset)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "Catalog",
          possibleTypes = listOf("Catalog")
        ).condition(listOf(CompiledCondition("isCatalog", false)))
        .selections(__onCatalog)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "DataService",
          possibleTypes = listOf("DataService")
        ).condition(listOf(CompiledCondition("isDataService", false)))
        .selections(__onDataService)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "DatasetSeries",
          possibleTypes = listOf("DatasetSeries")
        ).condition(listOf(CompiledCondition("isDatasetSeries", false)))
        .selections(__onDatasetSeries)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "resource",
          type = Resource.type
        ).arguments(listOf(
          CompiledArgument.Builder("id", CompiledVariable("id")).build(),
          CompiledArgument.Builder("isCatalog", CompiledVariable("isCatalog")).build(),
          CompiledArgument.Builder("isDataService", CompiledVariable("isDataService")).build(),
          CompiledArgument.Builder("isDataset", CompiledVariable("isDataset")).build(),
          CompiledArgument.Builder("isDatasetSeries", CompiledVariable("isDatasetSeries")).build(),
          CompiledArgument.Builder("page", CompiledVariable("page")).build()
        ))
        .selections(__resource)
        .build()
      )
}
