//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.schema.type.GraphQLString
import com.schema.type.LangString
import com.schema.type.PublisherOutput
import com.schema.type.Resource
import kotlin.collections.List

public object KeywordsByPublisherQuerySelections {
  private val __onDataset: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "keywords",
          type = LangString.type.notNull().list()
        ).build()
      )

  private val __resources: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Dataset",
          possibleTypes = listOf("Dataset")
        ).selections(__onDataset)
        .build()
      )

  private val __publisher: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "notation",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "label",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "resources",
          type = Resource.type.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("page", CompiledVariable("page")).build()
        ))
        .selections(__resources)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "publisher",
          type = PublisherOutput.type
        ).arguments(listOf(
          CompiledArgument.Builder("label", CompiledVariable("label")).build(),
          CompiledArgument.Builder("notation", CompiledVariable("notation")).build()
        ))
        .selections(__publisher)
        .build()
      )
}
