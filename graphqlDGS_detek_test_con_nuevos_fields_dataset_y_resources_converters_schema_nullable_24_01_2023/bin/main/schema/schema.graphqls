schema {
  query: Query
}


type Query {
  resource(id: ID): Resource
  catalog(id: ID): Catalog
  dataset(id: ID): DatasetInCatalog
  dataService(id: ID): DataService
  datasetSeries(id: ID): DatasetSeries
  catalogRecord(id: ID): CatalogRecord
  distribution(id: ID): Distribution
  belongsToCatalog(id:ID):[Catalog!]
}
#
# type -> final type, cannot be extended
# interface -> abstrct type, can be extended
#

# Resource published or curated by a single agent.
interface Resource {
  id: ID!
  # A name given to the resource.
  title: String!
  description: [ResourceDescription!]
  language: [String!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
}

# It can be a Resource, Catalog, dataset or dataservice
# union ResourceInCatalog = DatasetSeries | DataService | Dataset | Catalog
interface ResourceInCatalog implements AbstractDataset & Resource{
  id: ID!
  title: String!
  description: [ResourceDescription!]
  language: [String!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
}

interface DatasetInCatalog implements AbstractDataset & Resource {
  id: ID!
  title: String!
  description: [ResourceDescription!]
  language: [String!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
}

# Concepto dcat:Dataset 
interface AbstractDataset implements Resource {
  id: ID!
  title: String!
  description: [ResourceDescription!]
  language: [String!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
 
}

# A collection of operations that provides access to one or more datasets or 
# data processing functions.
#
# Implemented by DataServiceEntity
#   id
#   title
#.  servesDataset -> <id dataservice entity, id dataset in catalog>
type DataService implements ResourceInCatalog & Resource & AbstractDataset {
  id: ID!
  title: String!  
  servesDataset: [DatasetInCatalog!] # If a DataService is bound to one or more specified 
                                     # Datasets, they are indicated by the this property.
  description: [ResourceDescription!]
  language: [String!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
}
 
#
# A Catalog represents a catalog, which is a Dataset in which each individual item 
# is a metadata record describing some resource.
#
# Implemented by CatalogEntity
#   id
#   title
#   resources = <fromId, CatalogEntity | DatasetEntity | DatasetSeriesEntity | DatasetServiceEntity, fromId>
#   datasets = <toId,  CatalogEntity | DatasetEntity | DatasetSeriesEntity, toId>
#   services = <toId,  DatasetServiceEntity, toId>
#   catalogs = relationships.findById(catalogEntity.id).filter { it.type = CatalogEntity })
#.  records => tabla de CatalogInRecord
type Catalog implements ResourceInCatalog & DatasetInCatalog & AbstractDataset & Resource {
  id: ID!
  title: String!
  resources: [ResourceInCatalog!] # A resource that is listed in the catalog.
  datasets: [DatasetInCatalog!]  # A dataset that is listed in the catalog.
  services: [DataService!] # A service that is listed in the catalog. 
  catalogs: [Catalog!] # A catalog that is listed in the catalog. 
  records: [CatalogRecord!] # A record describing the registration of a single resource
                             # (e.g., a dataset, a data service) that is part of the catalog.
                             # set(records.primaryTopic) == resources
  description: [ResourceDescription!]
  language: [String!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
  # Future:
  #  - A Catalog can record descriptions of resources such as dataset or dataservices
  #    dcatDescriptions(first: Int, offset: ID): [CatalogDescriptions!]
}

# Concepto dcat:DatasetSeries
# Implemented by DataServiceEntity
#   id
#   title
type DatasetSeries implements ResourceInCatalog & DatasetInCatalog & AbstractDataset & Resource {
  id: ID!
  title: String!
  description: [ResourceDescription!]
  language: [String!]
  membersDatasets: [Dataset!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
}

# Dataset que no es ni Catalogo ni Dataset Series
# Implemented by DataServiceEntity
#   id
#   title
#.  inSeries -> <id dataservice entity, id series>
#.  distributions -> <id dataservice entity, id distributions>
type Dataset implements ResourceInCatalog & DatasetInCatalog & AbstractDataset & Resource {
  id: ID!
  title: String!  
  inSeries: [DatasetSeries!] # A dataset series of which the dataset is part.
  distributions: [Distribution!] # An available distribution of the dataset.
  description: [ResourceDescription!]
  language: [String!]
  fechaHoraCreacion: FechaHora
  ultimaModificacion: FechaHora
  keywords:[Keywords!]
  spatial: [String!]
  accrualPeriodicity: Periodicidad
  temporal: CoberturaTemporal
}

# Implemented by CatalogRecordEntity
#   id
#   title
#   primaryTopic: recordId
#.  +CatalogInRecord: <catalogId, catalogRecordId>
type CatalogRecord {
  id: ID!
  title: String!  # Record es "Zaragoza", Catalog Record es "Metadato de Zaragoza"
  primaryTopic: ResourceInCatalog!
}

# A specific representation of a dataset. 
# This represents a general availability of a dataset.
# That is, represents an accessible form of a dataset such as a downloadable file.
#
# Implemented by Distribution
#   id
#   title
#.  accessService .. ver DataServiceEntity.distributions -> <id dataservice entity, id distributions>
type Distribution {
  id: ID!
  title: String!  
  accessService: [DataService!] # A data service that gives access to the distribution of the dataset
}

# This represents the description of one resource and the language of that description
type ResourceDescription{
  text:String
  idioma:String
}
# This represents one keyword of a dataset and its language

type Keywords{
  word:String
  idioma:String
}

# This represents one date and time format
type FechaHora{
  fecha:String  #dd/mm/yyyy
  hora:String   #HH:MM:SS
}

# This represents the updating frequency
type Periodicidad{
  rango:String  #day,month,year
  periodo:String   #"1.0"...
}

type CoberturaTemporal{
  start:FechaHora
  end:FechaHora
}