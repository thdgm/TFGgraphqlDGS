//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.and
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.apollographql.apollo3.api.variable
import com.schema.DatasetsByPublisherQuery
import commonModels.LangStringAdapterScalar
import commonModels.MediaTypeAdapterScalar
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object DatasetsByPublisherQuery_ResponseAdapter {
  public object Data : Adapter<DatasetsByPublisherQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("resourcesByFilter")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.Data {
      var _resourcesByFilter: List<DatasetsByPublisherQuery.ResourcesByFilter?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _resourcesByFilter = ResourcesByFilter.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetsByPublisherQuery.Data(
        resourcesByFilter = _resourcesByFilter
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.Data,
    ): Unit {
      writer.name("resourcesByFilter")
      ResourcesByFilter.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.resourcesByFilter)
    }
  }

  public object ResourcesByFilter : Adapter<DatasetsByPublisherQuery.ResourcesByFilter> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.ResourcesByFilter {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onDataset: DatasetsByPublisherQuery.OnDataset? = null
      if (and(possibleTypes("Dataset"),variable("isDataset")).evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onDataset = com.schema.adapter.DatasetsByPublisherQuery_ResponseAdapter.OnDataset.fromJson(reader,
            customScalarAdapters)
      }

      return DatasetsByPublisherQuery.ResourcesByFilter(
        __typename = __typename,
        onDataset = _onDataset
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.ResourcesByFilter,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onDataset != null) {
        com.schema.adapter.DatasetsByPublisherQuery_ResponseAdapter.OnDataset.toJson(writer,
            customScalarAdapters, value.onDataset)
      }
    }
  }

  public object OnDataset : Adapter<DatasetsByPublisherQuery.OnDataset> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "title", "distributions", "inCatalog")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.OnDataset {
      var _id: String? = null
      var _title: List<LangStringAdapterScalar>? = null
      var _distributions: List<DatasetsByPublisherQuery.Distribution>? = null
      var _inCatalog: List<DatasetsByPublisherQuery.InCatalog>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          2 -> _distributions = Distribution.obj().list().nullable().fromJson(reader,
              customScalarAdapters)
          3 -> _inCatalog = InCatalog.obj().list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return DatasetsByPublisherQuery.OnDataset(
        id = _id!!,
        title = _title,
        distributions = _distributions,
        inCatalog = _inCatalog
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.OnDataset,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.title)

      writer.name("distributions")
      Distribution.obj().list().nullable().toJson(writer, customScalarAdapters, value.distributions)

      writer.name("inCatalog")
      InCatalog.obj().list().nullable().toJson(writer, customScalarAdapters, value.inCatalog)
    }
  }

  public object Distribution : Adapter<DatasetsByPublisherQuery.Distribution> {
    public val RESPONSE_NAMES: List<String> = listOf("format")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.Distribution {
      var _format: MediaTypeAdapterScalar? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _format = commonModels.mediaTypeAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetsByPublisherQuery.Distribution(
        format = _format
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.Distribution,
    ): Unit {
      writer.name("format")
      commonModels.mediaTypeAdapter.nullable().toJson(writer, customScalarAdapters, value.format)
    }
  }

  public object InCatalog : Adapter<DatasetsByPublisherQuery.InCatalog> {
    public val RESPONSE_NAMES: List<String> = listOf("resources")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.InCatalog {
      var _resources: List<DatasetsByPublisherQuery.Resource>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _resources = Resource.obj(true).list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetsByPublisherQuery.InCatalog(
        resources = _resources
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.InCatalog,
    ): Unit {
      writer.name("resources")
      Resource.obj(true).list().nullable().toJson(writer, customScalarAdapters, value.resources)
    }
  }

  public object Resource : Adapter<DatasetsByPublisherQuery.Resource> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.Resource {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onDataService: DatasetsByPublisherQuery.OnDataService? = null
      if (possibleTypes("DataService").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onDataService = com.schema.adapter.DatasetsByPublisherQuery_ResponseAdapter.OnDataService.fromJson(reader,
            customScalarAdapters)
      }

      return DatasetsByPublisherQuery.Resource(
        __typename = __typename,
        onDataService = _onDataService
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.Resource,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onDataService != null) {
        com.schema.adapter.DatasetsByPublisherQuery_ResponseAdapter.OnDataService.toJson(writer,
            customScalarAdapters, value.onDataService)
      }
    }
  }

  public object OnDataService : Adapter<DatasetsByPublisherQuery.OnDataService> {
    public val RESPONSE_NAMES: List<String> = listOf("isAccessedBy")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.OnDataService {
      var _isAccessedBy: List<DatasetsByPublisherQuery.IsAccessedBy>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _isAccessedBy = IsAccessedBy.obj().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DatasetsByPublisherQuery.OnDataService(
        isAccessedBy = _isAccessedBy
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.OnDataService,
    ): Unit {
      writer.name("isAccessedBy")
      IsAccessedBy.obj().list().nullable().toJson(writer, customScalarAdapters, value.isAccessedBy)
    }
  }

  public object IsAccessedBy : Adapter<DatasetsByPublisherQuery.IsAccessedBy> {
    public val RESPONSE_NAMES: List<String> = listOf("id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DatasetsByPublisherQuery.IsAccessedBy {
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return DatasetsByPublisherQuery.IsAccessedBy(
        id = _id!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DatasetsByPublisherQuery.IsAccessedBy,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)
    }
  }
}
