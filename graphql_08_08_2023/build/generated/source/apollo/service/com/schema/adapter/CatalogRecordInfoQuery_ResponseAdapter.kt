//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.schema.CatalogRecordInfoQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object CatalogRecordInfoQuery_ResponseAdapter {
  public object Data : Adapter<CatalogRecordInfoQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("catalogRecord")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        CatalogRecordInfoQuery.Data {
      var _catalogRecord: CatalogRecordInfoQuery.CatalogRecord? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _catalogRecord = CatalogRecord.obj().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return CatalogRecordInfoQuery.Data(
        catalogRecord = _catalogRecord
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: CatalogRecordInfoQuery.Data,
    ): Unit {
      writer.name("catalogRecord")
      CatalogRecord.obj().nullable().toJson(writer, customScalarAdapters, value.catalogRecord)
    }
  }

  public object CatalogRecord : Adapter<CatalogRecordInfoQuery.CatalogRecord> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "title", "content", "contentType",
        "contentURL", "hints", "inCatalog", "primaryTopic")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        CatalogRecordInfoQuery.CatalogRecord {
      var _id: String? = null
      var _title: String? = null
      var _content: String? = null
      var _contentType: String? = null
      var _contentURL: String? = null
      var _hints: List<String>? = null
      var _inCatalog: List<CatalogRecordInfoQuery.InCatalog>? = null
      var _primaryTopic: CatalogRecordInfoQuery.PrimaryTopic? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _content = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _contentType = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _contentURL = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _hints = StringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          6 -> _inCatalog = InCatalog.obj().list().nullable().fromJson(reader, customScalarAdapters)
          7 -> _primaryTopic = PrimaryTopic.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return CatalogRecordInfoQuery.CatalogRecord(
        id = _id!!,
        title = _title,
        content = _content,
        contentType = _contentType,
        contentURL = _contentURL,
        hints = _hints,
        inCatalog = _inCatalog,
        primaryTopic = _primaryTopic!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: CatalogRecordInfoQuery.CatalogRecord,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("content")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.content)

      writer.name("contentType")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.contentType)

      writer.name("contentURL")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.contentURL)

      writer.name("hints")
      StringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.hints)

      writer.name("inCatalog")
      InCatalog.obj().list().nullable().toJson(writer, customScalarAdapters, value.inCatalog)

      writer.name("primaryTopic")
      PrimaryTopic.obj().toJson(writer, customScalarAdapters, value.primaryTopic)
    }
  }

  public object InCatalog : Adapter<CatalogRecordInfoQuery.InCatalog> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "identifier")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        CatalogRecordInfoQuery.InCatalog {
      var _id: String? = null
      var _identifier: List<String>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _identifier = StringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return CatalogRecordInfoQuery.InCatalog(
        id = _id!!,
        identifier = _identifier
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: CatalogRecordInfoQuery.InCatalog,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("identifier")
      StringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.identifier)
    }
  }

  public object PrimaryTopic : Adapter<CatalogRecordInfoQuery.PrimaryTopic> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "__typename", "identifier")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        CatalogRecordInfoQuery.PrimaryTopic {
      var _id: String? = null
      var __typename: String? = null
      var _identifier: List<String>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _identifier = StringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return CatalogRecordInfoQuery.PrimaryTopic(
        id = _id!!,
        __typename = __typename!!,
        identifier = _identifier
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: CatalogRecordInfoQuery.PrimaryTopic,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("identifier")
      StringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.identifier)
    }
  }
}
