//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.schema.type.DataService
import com.schema.type.Distribution
import com.schema.type.GraphQLID
import com.schema.type.GraphQLString
import com.schema.type.LangString
import com.schema.type.MediaType
import com.schema.type.NonNegativeInt
import kotlin.collections.List

public object DistributionInfoQuerySelections {
  private val __accessService: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build()
      )

  private val __distribution: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "identifier",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "accessUrl",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "format",
          type = MediaType.type
        ).build(),
        CompiledField.Builder(
          name = "byteSize",
          type = NonNegativeInt.type
        ).build(),
        CompiledField.Builder(
          name = "accessService",
          type = DataService.type.notNull().list()
        ).selections(__accessService)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "distribution",
          type = Distribution.type
        ).arguments(listOf(
          CompiledArgument.Builder("id", CompiledVariable("id")).build()
        ))
        .selections(__distribution)
        .build()
      )
}
