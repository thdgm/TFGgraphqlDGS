//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.schema.adapter.DatasetInfoQuery_ResponseAdapter
import com.schema.adapter.DatasetInfoQuery_VariablesAdapter
import com.schema.selections.DatasetInfoQuerySelections
import commonModels.ConceptAdapterScalar
import commonModels.FrequencyAdapterScalar
import commonModels.LangStringAdapterScalar
import commonModels.MediaTypeAdapterScalar
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class DatasetInfoQuery(
  public val id: String,
) : Query<DatasetInfoQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    DatasetInfoQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = DatasetInfoQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.schema.type.Query.type
  )
  .selections(selections = DatasetInfoQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(DatasetInfoQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val resource: Resource?,
  ) : Query.Data

  public data class Resource(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on Dataset
     */
    public val onDataset: OnDataset?,
  )

  public data class OnDataset(
    public val id: String,
    public val title: List<LangStringAdapterScalar>?,
    public val publisher: ConceptAdapterScalar?,
    public val description: List<LangStringAdapterScalar>?,
    public val license: String?,
    public val keywords: List<LangStringAdapterScalar>?,
    public val theme: List<String>?,
    public val language: List<String>?,
    public val issued: Any?,
    public val modified: Any?,
    public val accrualPeriodicity: FrequencyAdapterScalar?,
    public val identifier: List<String>?,
    public val inCatalog: List<InCatalog>?,
    public val isPrimaryTopicOf: List<IsPrimaryTopicOf>?,
    public val inSeries: List<InSeries>?,
    public val isServedBy: List<IsServedBy>?,
    public val spatial: List<String>?,
    public val temporal: Temporal?,
    public val distributions: List<Distribution>?,
  )

  public data class InCatalog(
    public val id: String,
    public val identifier: List<String>?,
    public val title: List<LangStringAdapterScalar>?,
  )

  public data class IsPrimaryTopicOf(
    public val id: String,
    public val title: String?,
  )

  public data class InSeries(
    public val id: String,
    public val title: List<LangStringAdapterScalar>?,
    public val identifier: List<String>?,
  )

  public data class IsServedBy(
    public val id: String,
    public val identifier: List<String>?,
    public val title: List<LangStringAdapterScalar>?,
  )

  public data class Temporal(
    public val start: Any?,
    public val end: Any?,
  )

  public data class Distribution(
    public val accessUrl: String?,
    public val format: MediaTypeAdapterScalar?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "0ac7998f1ebe9dce872cc1f0ed9f41b5ee3da7398c1eb67fd20227d6e34b02fe"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query DatasetInfo($id: ID!) {
     *   resource(id: $id) {
     *     __typename
     *     ... on Dataset {
     *       id
     *       title
     *       publisher
     *       description
     *       license
     *       keywords
     *       theme
     *       language
     *       issued
     *       modified
     *       accrualPeriodicity
     *       identifier
     *       inCatalog {
     *         id
     *         identifier
     *         title
     *       }
     *       isPrimaryTopicOf {
     *         id
     *         title
     *       }
     *       inSeries {
     *         id
     *         title
     *         identifier
     *       }
     *       isServedBy {
     *         id
     *         identifier
     *         title
     *       }
     *       spatial
     *       temporal {
     *         start
     *         end
     *       }
     *       distributions {
     *         accessUrl
     *         format
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query DatasetInfo(${'$'}id: ID!) { resource(id: ${'$'}id) { __typename ... on Dataset { id title publisher description license keywords theme language issued modified accrualPeriodicity identifier inCatalog { id identifier title } isPrimaryTopicOf { id title } inSeries { id title identifier } isServedBy { id identifier title } spatial temporal { start end } distributions { accessUrl format } } } }"

    public const val OPERATION_NAME: String = "DatasetInfo"
  }
}
