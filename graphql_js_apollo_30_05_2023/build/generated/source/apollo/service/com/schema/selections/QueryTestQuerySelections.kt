//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.schema.type.Catalog
import com.schema.type.Concept
import com.schema.type.Distribution
import com.schema.type.GraphQLID
import com.schema.type.GraphQLString
import com.schema.type.LangString
import com.schema.type.MediaType
import com.schema.type.Resource
import com.schema.type.ResourceInCatalog
import kotlin.collections.List

public object QueryTestQuerySelections {
  private val __distributions: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "format",
          type = MediaType.type
        ).build()
      )

  private val __resources: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build()
      )

  private val __inCatalog: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "resources",
          type = ResourceInCatalog.type.notNull().list()
        ).selections(__resources)
        .build()
      )

  private val __onDataset: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = LangString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "publisher",
          type = Concept.type
        ).build(),
        CompiledField.Builder(
          name = "distributions",
          type = Distribution.type.notNull().list()
        ).selections(__distributions)
        .build(),
        CompiledField.Builder(
          name = "inCatalog",
          type = Catalog.type.notNull().list()
        ).selections(__inCatalog)
        .build()
      )

  private val __resourcesByFilter: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Dataset",
          possibleTypes = listOf("Dataset")
        ).selections(__onDataset)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "resourcesByFilter",
          type = Resource.type.list()
        ).arguments(listOf(
          CompiledArgument.Builder("filters", CompiledVariable("filter")).build(),
          CompiledArgument.Builder("page", CompiledVariable("page")).build(),
          CompiledArgument.Builder("type", CompiledVariable("type")).build()
        ))
        .selections(__resourcesByFilter)
        .build()
      )
}
