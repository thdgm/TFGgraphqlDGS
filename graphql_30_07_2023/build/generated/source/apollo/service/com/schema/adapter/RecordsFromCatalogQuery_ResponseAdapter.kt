//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.schema.RecordsFromCatalogQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object RecordsFromCatalogQuery_ResponseAdapter {
  public object Data : Adapter<RecordsFromCatalogQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("catalog")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        RecordsFromCatalogQuery.Data {
      var _catalog: RecordsFromCatalogQuery.Catalog? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _catalog = Catalog.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return RecordsFromCatalogQuery.Data(
        catalog = _catalog
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: RecordsFromCatalogQuery.Data,
    ): Unit {
      writer.name("catalog")
      Catalog.obj().nullable().toJson(writer, customScalarAdapters, value.catalog)
    }
  }

  public object Catalog : Adapter<RecordsFromCatalogQuery.Catalog> {
    public val RESPONSE_NAMES: List<String> = listOf("records")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        RecordsFromCatalogQuery.Catalog {
      var _records: List<RecordsFromCatalogQuery.Record>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _records = Record.obj().list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return RecordsFromCatalogQuery.Catalog(
        records = _records
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: RecordsFromCatalogQuery.Catalog,
    ): Unit {
      writer.name("records")
      Record.obj().list().nullable().toJson(writer, customScalarAdapters, value.records)
    }
  }

  public object Record : Adapter<RecordsFromCatalogQuery.Record> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "title")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        RecordsFromCatalogQuery.Record {
      var _id: String? = null
      var _title: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return RecordsFromCatalogQuery.Record(
        id = _id!!,
        title = _title
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: RecordsFromCatalogQuery.Record,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.title)
    }
  }
}
