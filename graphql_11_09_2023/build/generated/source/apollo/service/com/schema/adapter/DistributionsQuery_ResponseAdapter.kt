//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.schema.DistributionsQuery
import commonModels.LangStringAdapterScalar
import commonModels.MediaTypeAdapterScalar
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object DistributionsQuery_ResponseAdapter {
  public object Data : Adapter<DistributionsQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("distributionsByFilters")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DistributionsQuery.Data {
      var _distributionsByFilters: List<DistributionsQuery.DistributionsByFilter?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _distributionsByFilters = DistributionsByFilter.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return DistributionsQuery.Data(
        distributionsByFilters = _distributionsByFilters
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DistributionsQuery.Data,
    ): Unit {
      writer.name("distributionsByFilters")
      DistributionsByFilter.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.distributionsByFilters)
    }
  }

  public object DistributionsByFilter : Adapter<DistributionsQuery.DistributionsByFilter> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "title", "accessUrl", "format",
        "byteSize")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        DistributionsQuery.DistributionsByFilter {
      var _id: String? = null
      var _title: List<LangStringAdapterScalar>? = null
      var _accessUrl: String? = null
      var _format: MediaTypeAdapterScalar? = null
      var _byteSize: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = commonModels.langStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          2 -> _accessUrl = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _format = commonModels.mediaTypeAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          4 -> _byteSize = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return DistributionsQuery.DistributionsByFilter(
        id = _id!!,
        title = _title,
        accessUrl = _accessUrl,
        format = _format,
        byteSize = _byteSize
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: DistributionsQuery.DistributionsByFilter,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      commonModels.langStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.title)

      writer.name("accessUrl")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.accessUrl)

      writer.name("format")
      commonModels.mediaTypeAdapter.nullable().toJson(writer, customScalarAdapters, value.format)

      writer.name("byteSize")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.byteSize)
    }
  }
}
