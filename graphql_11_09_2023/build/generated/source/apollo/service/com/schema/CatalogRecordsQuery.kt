//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.7.4'.
//
package com.schema

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.schema.adapter.CatalogRecordsQuery_ResponseAdapter
import com.schema.adapter.CatalogRecordsQuery_VariablesAdapter
import com.schema.selections.CatalogRecordsQuerySelections
import com.schema.type.MapInput
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class CatalogRecordsQuery(
  public val filter: Optional<List<MapInput>?> = Optional.Absent,
  public val page: Int,
) : Query<CatalogRecordsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    CatalogRecordsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = CatalogRecordsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.schema.type.Query.type
  )
  .selections(selections = CatalogRecordsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(CatalogRecordsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val catalogRecordsByFilters: List<CatalogRecordsByFilter?>?,
  ) : Query.Data {
    public fun catalogRecordsByFiltersFilterNotNull(): List<CatalogRecordsByFilter>? =
        catalogRecordsByFilters?.filterNotNull()
  }

  public data class CatalogRecordsByFilter(
    public val id: String,
    public val title: String?,
    public val contentType: String?,
    public val hints: List<String>?,
    public val primaryTopic: PrimaryTopic,
  )

  public data class PrimaryTopic(
    public val id: String,
    public val identifier: List<String>?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "4ded40ef23d99b01bbf9b9aa15841a234b0bf92be2671676dfc1d86d26c30037"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query CatalogRecords($filter: \[MapInput!\], $page: Int!) {
     *   catalogRecordsByFilters(filters: $filter, page: $page) {
     *     id
     *     title
     *     contentType
     *     hints
     *     primaryTopic {
     *       id
     *       identifier
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query CatalogRecords(${'$'}filter: [MapInput!], ${'$'}page: Int!) { catalogRecordsByFilters(filters: ${'$'}filter, page: ${'$'}page) { id title contentType hints primaryTopic { id identifier } } }"

    public const val OPERATION_NAME: String = "CatalogRecords"
  }
}
